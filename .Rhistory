eye_argila_q2_1
plot(semi_silte_q2, main="Semivariograma argila da dicotomica para q2")
lines(ajust_argila_q2_1, col="black")
lines(ajust_argila_q2_2, col="green")
lines(ajust_argila_q2_3, col="pink")
lines(eye_argila_q2_1, col="red")
plot(semi_silte_q2, main="Semivariograma argila da dicotomica para q2")
lines(ajust_argila_q2_1, col="black")
lines(ajust_argila_q2_2, col="green")
lines(ajust_argila_q2_3, col="pink")
lines(eye_argila_q2_1, col="red")
eye_argila_q2_1<-eyefit(semi_silte_q2)
eye_argila_q2_1
plot(semi_silte_q2, main="Semivariograma argila da dicotomica para q2")
lines(ajust_argila_q2_1, col="black")
lines(ajust_argila_q2_2, col="green")
lines(ajust_argila_q2_3, col="pink")
lines(eye_argila_q2_1, col="red")
plot(semi_silte_q2, main="Semivariograma argila da dicotomica para q2")
lines(ajust_argila_q2_1, col="black")
lines(ajust_argila_q2_2, col="green")
lines(ajust_argila_q2_3, col="pink")
lines(eye_argila_q2_1, col="red")
eye_argila_q2_2<-eyefit(semi_silte_q2)
print('ajust_argila_q2_1')
validacao(ajust_argila_q2_1,geo_argila_q2)
print('ajust_argila_q2_2')
validacao(ajust_argila_q2_2,geo_argila_q2)
print('ajust_argila_q2_3')
validacao(ajust_argila_q2_3,geo_argila_q2)
print('eye_argila_q2_1')
validacao(eye_argila_q2_1,geo_argila_q2)
plot(semi_silte_q2, main="Semivariograma argila da dicotomica para q2")
lines(ajust_argila_q2_1, col="black")
plot(semi_silte_q2, main="Semivariograma argila da dicotomica para q2")
lines(ajust_argila_q2_1, col="black")
lines(ajust_argila_q2_2, col="green")
lines(ajust_argila_q2_3, col="pink")
lines(eye_argila_q2_1, col="red")
plot(semi_silte_q2, main="Semivariograma argila da dicotomica para q2")
lines(ajust_argila_q2_1, col="black")
lines(ajust_argila_q2_2, col="green")
lines(ajust_argila_q2_3, col="pink")
lines(eye_argila_q2_1, col="red")
plot(semi_silte_q2, main="Semivariograma argila da dicotomica para q2")
lines(ajust_argila_q2_1, col="black")
lines(ajust_argila_q2_2, col="green")
lines(ajust_argila_q2_3, col="pink")
lines(eye_argila_q2_1, col="red")
plot(semi_silte_q2, main="Semivariograma argila da dicotomica para q2")
lines(ajust_argila_q2_1, col="black")
plot(semi_silte_q2, main="Semivariograma argila da dicotomica para q2")
lines(ajust_argila_q2_1, col="black")
lines(ajust_argila_q2_2, col="green")
plot(semi_silte_q2, main="Semivariograma argila da dicotomica para q2")
lines(ajust_argila_q2_1, col="black")
lines(ajust_argila_q2_2, col="green")
lines(ajust_argila_q2_3, col="pink")
plot(semi_silte_q2, main="Semivariograma argila da dicotomica para q2")
lines(ajust_argila_q2_1, col="black")
lines(ajust_argila_q2_2, col="green")
lines(ajust_argila_q2_3, col="pink")
lines(eye_argila_q2_1, col="red")
semi_silte_md <- variog(geo_silte_md, max.dist=dist)
ajust_argila_md_1 <- variofit(semi_silte_md, max.dist=dist,wei="equal")
ajust_argila_md_2 <- variofit(semi_silte_md, max.dist=dist)
ajust_argila_md_3 <- variofit(semi_silte_md, max.dist=dist,cov.model='spherical',wei="equal")
plot(semi_silte_md, main="Semivariograma argila da dicotomica para md")
lines(ajust_argila_md_1, col="black")
lines(ajust_argila_md_2, col="green")
lines(ajust_argila_md_3, col="pink")
eye_argila_md_1<-eyefit(semi_silte_md)
eye_argila_md_1<-eyefit(semi_silte_md)
eye_argila_md_1<-eyefit(semi_silte_md)
semi_silte_md <- variog(geo_silte_md, max.dist=dist)
ajust_silte_md_1 <- variofit(semi_silte_md, max.dist=dist,wei="equal")
ajust_silte_md_2 <- variofit(semi_silte_md, max.dist=dist)
ajust_silte_md_3 <- variofit(semi_silte_md, max.dist=dist,cov.model='spherical',wei="equal")
plot(semi_silte_md, main="Semivariograma silte da dicotomica para md")
lines(ajust_silte_md_1, col="black")
lines(ajust_silte_md_2, col="green")
lines(ajust_silte_md_3, col="pink")
print('ajust_silte_md_1')
validacao(ajust_silte_md_1,geo_silte_md)
print('ajust_silte_md_2')
validacao(ajust_silte_md_2,geo_silte_md)
print('ajust_silte_md_3')
validacao(ajust_silte_md_3,geo_silte_md)
semi_silte_q3 <- variog(geo_silte_q3, max.dist=dist)
ajust_silte_q3_1 <- variofit(semi_silte_q3, max.dist=dist,wei="equal")
ajust_silte_q3_2 <- variofit(semi_silte_q3, max.dist=dist)
ajust_silte_q3_3 <- variofit(semi_silte_q3, max.dist=dist,cov.model='spherical',wei="equal")
plot(semi_silte_q3, main="Semivariograma silte da dicotomica para q3")
lines(ajust_silte_q3_1, col="black")
lines(ajust_silte_q3_2, col="green")
lines(ajust_silte_q3_3, col="pink")
print('ajust_silte_q3_1')
validacao(ajust_silte_q3_1,geo_silte_q3)
print('ajust_silte_q3_2')
validacao(ajust_silte_q3_2,geo_silte_q3)
print('ajust_silte_q3_3')
validacao(ajust_silte_q3_3,geo_silte_q3)
semi_areia_q1 <- variog(geo_areia_q1, max.dist=dist)
ajust_areia_q1_1 <- variofit(semi_areia_q1, max.dist=dist,wei="equal")
ajust_areia_q1_2 <- variofit(semi_areia_q1, max.dist=dist)
ajust_areia_q1_3 <- variofit(semi_areia_q1, max.dist=dist,cov.model='spherical',wei="equal")
plot(semi_areia_q1, main="Semivariograma areia da dicotomica para q3")
lines(ajust_areia_q1_1, col="black")
lines(ajust_areia_q1_2, col="green")
lines(ajust_areia_q1_3, col="pink")
eye_areia_q1_1<-eyefit(semi_areia_q1)
eye_areia_q1_1
eye_areia_q1_1<-eyefit(semi_areia_q1)
eye_areia_q1_1
semi_areia_q1 <- variog(geo_areia_q1, max.dist=dist)
ajust_areia_q1_1 <- variofit(semi_areia_q1, max.dist=dist,wei="equal")
ajust_areia_q1_2 <- variofit(semi_areia_q1, max.dist=dist)
ajust_areia_q1_3 <- variofit(semi_areia_q1, max.dist=dist,cov.model='spherical',wei="equal")
eye_areia_q1_1<-eyefit(semi_areia_q1)
# cov.model sigmasq phi tausq kappa kappa2   practicalRange
# 1 exponential    0.09  14  0.12  <NA>   <NA> 41.9402518294012
plot(semi_areia_q1, main="Semivariograma areia da dicotomica para q3")
lines(ajust_areia_q1_1, col="black")
lines(ajust_areia_q1_2, col="green")
lines(ajust_areia_q1_3, col="pink")
lines(eye_areia_q1_1, col="red")
plot(semi_areia_q1, main="Semivariograma areia da dicotomica para q3")
lines(ajust_areia_q1_1, col="black")
lines(ajust_areia_q1_2, col="green")
lines(ajust_areia_q1_3, col="pink")
lines(eye_areia_q1_1, col="red")
print('ajust_areia_q1_1')
validacao(ajust_areia_q1_1,geo_areia_q1)
print('ajust_areia_q1_2')
validacao(ajust_areia_q1_2,geo_areia_q1)
print('ajust_areia_q1_3')
validacao(ajust_areia_q1_3,geo_areia_q1)
print('eye_areia_q1_1')
validacao(eye_areia_q1_1,geo_areia_q1)
eye_areia_q1_1<-eyefit(semi_areia_q1)
eye_areia_q1_1
eye_areia_q1_1<-eyefit(semi_areia_q1)
print('ajust_areia_q1_1')
validacao(ajust_areia_q1_1,geo_areia_q1)
print('ajust_areia_q1_2')
validacao(ajust_areia_q1_2,geo_areia_q1)
print('ajust_areia_q1_3')
validacao(ajust_areia_q1_3,geo_areia_q1)
print('eye_areia_q1_1')
validacao(eye_areia_q1_1,geo_areia_q1)
plot(semi_areia_q1, main="Semivariograma areia da dicotomica para q3")
lines(ajust_areia_q1_1, col="black")
lines(ajust_areia_q1_2, col="green")
lines(ajust_areia_q1_3, col="pink")
lines(eye_areia_q1_1, col="red")
eye_areia_q1_1<-eyefit(semi_areia_q1)
eye_areia_q1_1
eye_areia_q1_1<-eyefit(semi_areia_q1)
eye_areia_q1_1
print('ajust_areia_q1_1')
validacao(ajust_areia_q1_1,geo_areia_q1)
print('ajust_areia_q1_2')
validacao(ajust_areia_q1_2,geo_areia_q1)
print('ajust_areia_q1_3')
validacao(ajust_areia_q1_3,geo_areia_q1)
print('eye_areia_q1_1')
validacao(eye_areia_q1_1,geo_areia_q1)
eye_areia_q1_1<-eyefit(semi_areia_q1)
eye_areia_q1_1
eye_areia_q1_1<-eyefit(semi_areia_q1)
print('eye_areia_q1_1')
validacao(eye_areia_q1_1,geo_areia_q1)
eye_areia_q1_1<-eyefit(semi_areia_q1)
print('eye_areia_q1_1')
validacao(eye_areia_q1_1,geo_areia_q1)
eye_areia_q1_1<-eyefit(semi_areia_q1)
print('eye_areia_q1_1')
validacao(eye_areia_q1_1,geo_areia_q1)
semi_areia_q2 <- variog(geo_areia_q2, max.dist=dist)
ajust_areia_q2_1 <- variofit(semi_areia_q2, max.dist=dist,wei="equal")
ajust_areia_q2_2 <- variofit(semi_areia_q2, max.dist=dist)
ajust_areia_q2_3 <- variofit(semi_areia_q2, max.dist=dist,cov.model='spherical',wei="equal")
plot(semi_areia_q2, main="Semivariograma areia da dicotomica para q3")
lines(ajust_areia_q2_1, col="black")
lines(ajust_areia_q2_2, col="green")
lines(ajust_areia_q2_3, col="pink")
eye_areia_q2_1<-eyefit(semi_areia_q2)
eye_areia_q2_1<-eyefit(semi_areia_q2)
eye_areia_q2_1
eye_areia_q2_1<-eyefit(semi_areia_q2)
eye_areia_q2_1
plot(semi_areia_q2, main="Semivariograma areia da dicotomica para q3")
lines(ajust_areia_q2_1, col="black")
lines(ajust_areia_q2_2, col="green")
lines(ajust_areia_q2_3, col="pink")
lines(eye_areia_q2_1, col="red")
plot(semi_areia_q2, main="Semivariograma areia da dicotomica para q3")
lines(ajust_areia_q2_1, col="black")
lines(ajust_areia_q2_2, col="green")
lines(ajust_areia_q2_3, col="pink")
lines(eye_areia_q2_1, col="red")
print('ajust_areia_q2_1')
validacao(ajust_areia_q2_1,geo_areia_q2)
print('ajust_areia_q2_2')
validacao(ajust_areia_q2_2,geo_areia_q2)
print('ajust_areia_q2_3')
validacao(ajust_areia_q2_3,geo_areia_q2)
print('eye_areia_q2_1')
validacao(eye_areia_q2_1,geo_areia_q2)
semi_areia_md <- variog(geo_areia_md, max.dist=dist)
ajust_areia_md_1 <- variofit(semi_areia_md, max.dist=dist,wei="equal")
ajust_areia_md_2 <- variofit(semi_areia_md, max.dist=dist)
ajust_areia_md_3 <- variofit(semi_areia_md, max.dist=dist,cov.model='spherical',wei="equal")
semi_areia_md <- variog(geo_areia_md, max.dist=dist)
ajust_areia_md_1 <- variofit(semi_areia_md, max.dist=dist,wei="equal")
ajust_areia_md_2 <- variofit(semi_areia_md, max.dist=dist)
ajust_areia_md_3 <- variofit(semi_areia_md, max.dist=dist,cov.model='spherical',wei="equal")
eye_areia_md_1<-eyefit(semi_areia_md)
#     cov.model sigmasq phi tausq kappa kappa2   practicalRange
# 1 exponential    0.14  20  0.13  <NA>   <NA> 59.9146454703795
plot(semi_areia_md, main="Semivariograma areia da dicotomica para q3")
lines(ajust_areia_md_1, col="black")
lines(ajust_areia_md_2, col="green")
lines(ajust_areia_md_3, col="pink")
lines(eye_areia_md_1, col="red")
plot(semi_areia_md, main="Semivariograma areia da dicotomica para md")
lines(ajust_areia_md_1, col="black")
lines(ajust_areia_md_2, col="green")
lines(ajust_areia_md_3, col="pink")
lines(eye_areia_md_1, col="red")
print('ajust_areia_md_1')
validacao(ajust_areia_md_1,geo_areia_md)
print('ajust_areia_md_2')
validacao(ajust_areia_md_2,geo_areia_md)
print('ajust_areia_md_3')
validacao(ajust_areia_md_3,geo_areia_md)
print('eye_areia_md_1')
validacao(eye_areia_md_1,geo_areia_md)
print('ajust_areia_md_1')
validacao(ajust_areia_md_1,geo_areia_md)
print('ajust_areia_md_2')
validacao(ajust_areia_md_2,geo_areia_md)
print('ajust_areia_md_3')
validacao(ajust_areia_md_3,geo_areia_md)
print('eye_areia_md_1')
validacao(eye_areia_md_1,geo_areia_md)
semi_areia_q3 <- variog(geo_areia_q3, max.dist=dist)
ajust_areia_q3_1 <- variofit(semi_areia_q3, max.dist=dist,wei="equal")
ajust_areia_q3_2 <- variofit(semi_areia_q3, max.dist=dist)
ajust_areia_q3_3 <- variofit(semi_areia_q3, max.dist=dist,cov.model='spherical',wei="equal")
View(ajust_argila_q1_2)
semi_areia_q3 <- variog(geo_areia_q3, max.dist=dist)
ajust_areia_q3_1 <- variofit(semi_areia_q3, max.dist=dist,wei="equal")
ajust_areia_q3_2 <- variofit(semi_areia_q3, max.dist=dist)
ajust_areia_q3_3 <- variofit(semi_areia_q3, max.dist=dist,cov.model='spherical',wei="equal")
plot(semi_areia_q3, main="Semivariograma areia da dicotomica para q3")
lines(ajust_areia_q3_1, col="black")
lines(ajust_areia_q3_2, col="green")
lines(ajust_areia_q3_3, col="pink")
eye_areia_q3_1<-eyefit(semi_areia_q3)
eye_areia_q3_1<-eyefit(semi_areia_q3)
eye_areia_q3_1
eye_areia_q3_1<-eyefit(semi_areia_q3)
eye_areia_q3_1<-eyefit(semi_areia_q3)
plot(semi_areia_q3, main="Semivariograma areia da dicotomica para q3")
lines(ajust_areia_q3_1, col="black")
lines(ajust_areia_q3_2, col="green")
lines(ajust_areia_q3_3, col="pink")
lines(eye_areia_q3_1, col="red")
plot(semi_areia_q3, main="Semivariograma areia da dicotomica para q3")
lines(ajust_areia_q3_1, col="black")
lines(ajust_areia_q3_2, col="green")
lines(ajust_areia_q3_3, col="pink")
lines(eye_areia_q3_1, col="red")
print('ajust_areia_q3_1')
validacao(ajust_areia_q3_1,geo_areia_q3)
print('ajust_areia_q3_2')
validacao(ajust_areia_q3_2,geo_areia_q3)
print('ajust_areia_q3_3')
validacao(ajust_areia_q3_3,geo_areia_q3)
print('eye_areia_q3_1')
validacao(eye_areia_q3_1,geo_areia_q3)
eye_areia_q1_1<-eyefit(semi_areia_q1)
eye_areia_q1_1
eye_areia_q1_1<-eyefit(semi_areia_q1)
print('eye_areia_q1_1')
validacao(eye_areia_q1_1,geo_areia_q1)
plot(semi_areia_q1, main="Semivariograma areia da dicotomica para q1")
lines(ajust_areia_q1_1, col="black")
lines(ajust_areia_q1_2, col="green")
lines(ajust_areia_q1_3, col="pink")
lines(eye_areia_q1_1, col="red")
plot(semi_areia_q1, main="Semivariograma areia da dicotomica para q1")
lines(ajust_areia_q1_1, col="black")
lines(ajust_areia_q1_2, col="green")
lines(ajust_areia_q1_3, col="pink")
lines(eye_areia_q1_1, col="red")
eye_areia_q1_1<-eyefit(semi_areia_q1)
eye_areia_q1_1
eye_areia_q1_1
eye_areia_q1_1<-eyefit(semi_areia_q1)
eye_areia_q1_1<-eyefit(semi_areia_q1)
print('eye_areia_q1_1')
validacao(eye_areia_q1_1,geo_areia_q1)
plot(semi_areia_q1, main="Semivariograma areia da dicotomica para q1")
lines(ajust_areia_q1_1, col="black")
lines(ajust_areia_q1_2, col="green")
lines(ajust_areia_q1_3, col="pink")
lines(eye_areia_q1_1, col="red")
eye_areia_q1_1<-eyefit(semi_areia_q1)
eye_areia_q1_1
eye_areia_q1_1<-eyefit(semi_areia_q1)
eye_areia_q1_1<-eyefit(semi_areia_q1)
print('eye_areia_q1_1')
validacao(eye_areia_q1_1,geo_areia_q1)
plot(semi_areia_q1, main="Semivariograma areia da dicotomica para q1")
lines(ajust_areia_q1_1, col="black")
lines(ajust_areia_q1_2, col="green")
lines(ajust_areia_q1_3, col="pink")
lines(eye_areia_q1_1, col="red")
eye_areia_q1_1
eye_areia_q1_1<-eyefit(semi_areia_q1)
eye_areia_q1_1
eye_areia_q1_1<-eyefit(semi_areia_q1)
print('eye_areia_q1_1')
validacao(eye_areia_q1_1,geo_areia_q1)
plot(semi_areia_q1, main="Semivariograma areia da dicotomica para q1")
lines(ajust_areia_q1_1, col="black")
lines(ajust_areia_q1_2, col="green")
lines(ajust_areia_q1_3, col="pink")
lines(eye_areia_q1_1, col="red")
eye_areia_q1_1<-eyefit(semi_areia_q1)
eye_areia_q1_1<-eyefit(semi_areia_q1)
eye_areia_q1_1
eye_areia_q1_1<-eyefit(semi_areia_q1)
eye_areia_q1_1<-eyefit(semi_areia_q1)
print('eye_areia_q1_1')
validacao(eye_areia_q1_1,geo_areia_q1)
eye_areia_q1_1
# definindo os locais para para as estimativas
loci <- expand.grid(seq(min(dados$Latitude),max(dados$Latitude),1), seq(min(dados$Longitude),max(dados$Longitude),1)) #cria a malha a ser estimada
k = krige.conv(geo_argila_q1, loc=loci, krige=krige.control(type.krige = "ok", obj.model = eye_argila_q1_1))
contour(k, filled=TRUE, levels=seq(0.00,1.00, by=0.1))
title(main="Mapa de probabilidades menores ou igual a Q1 para argila")
k = krige.conv(geo_argila_q1, loc=loci, krige=krige.control(type.krige = "ok", obj.model = eye_argila_q1_1))
contour(k, filled=TRUE, levels=seq(0.00,1.00, by=0.1))
title(main="Mapa de prob menores ou igual a Q1 para argila")
k = krige.conv(geo_argila_q1, loc=loci, krige=krige.control(type.krige = "ok", obj.model = eye_argila_q1_1))
contour(k, filled=TRUE, levels=seq(0.00,1.00, by=0.1))
title(main="Mapa de prob < ou = a Q1 para argila")
k = krige.conv(geo_argila_q2, loc=loci, krige=krige.control(type.krige = "ok", obj.model = eye_argila_q2_1))
contour(k, filled=TRUE, levels=seq(0.00,1.00, by=0.1))
title(main="Mapa de prob < ou = a Q2 para argila")
k = krige.conv(geo_argila_md, loc=loci, krige=krige.control(type.krige = "ok", obj.model = eye_argila_md_2))
contour(k, filled=TRUE, levels=seq(0.00,1.00, by=0.1))
title(main="Mapa de prob < ou = a Médio para argila")
k = krige.conv(geo_silte_q1, loc=loci, krige=krige.control(type.krige = "ok", obj.model = eye_silte_q1_1))
eye_silte_q1_1<-eyefit(semi_silte_q1)
eye_silte_q1_1<-eyefit(semi_silte_q1)
plot(semi_silte_q1, main="Semivariograma silte da dicotomica para q1")
lines(ajust_silte_q1_1, col="black")
plot(semi_silte_q1, main="Semivariograma silte da dicotomica para q1")
lines(ajust_silte_q1_1, col="black")
plot(semi_silte_q1, main="Semivariograma silte da dicotomica para q1")
# lines(ajust_silte_q1_1, col="black")
# lines(ajust_silte_q1_2, col="green")
# lines(ajust_silte_q1_3, col="pink")
lines(eye_silte_q1_1, col="red")
# lines(eye_silte_q1_2, col="blue")
plot(semi_silte_q1, main="Semivariograma silte da dicotomica para q1")
# lines(ajust_silte_q1_1, col="black")
# lines(ajust_silte_q1_2, col="green")
# lines(ajust_silte_q1_3, col="pink")
lines(eye_silte_q1_1, col="red")
# lines(eye_silte_q1_2, col="blue")
eye_silte_q1_1<-eyefit(semi_silte_q1)
eye_silte_q1_1<-eyefit(semi_silte_q1)
k = krige.conv(geo_silte_q1, loc=loci, krige=krige.control(type.krige = "ok", obj.model = eye_silte_q1_1))
contour(k, filled=TRUE, levels=seq(0.00,1.00, by=0.1))
title(main="Mapa de prob < ou = a Q1 para silte")
k = krige.conv(geo_silte_q1, loc=loci, krige=krige.control(type.krige = "ok", obj.model = eye_silte_q1_1))
contour(k, filled=TRUE, levels=seq(0.00,1.00, by=0.1))
title(main="Mapa de prob < ou = a Q1 para silte")
k = krige.conv(geo_silte_q2, loc=loci, krige=krige.control(type.krige = "ok", obj.model = eye_silte_q2_1))
eye_silte_q2_1<-eyefit(semi_silte_q2)
k = krige.conv(geo_silte_q2, loc=loci, krige=krige.control(type.krige = "ok", obj.model = eye_silte_q2_1))
contour(k, filled=TRUE, levels=seq(0.00,1.00, by=0.1))
title(main="Mapa de prob < ou = a Q2 para silte")
k = krige.conv(geo_silte_q2, loc=loci, krige=krige.control(type.krige = "ok", obj.model = eye_silte_q2_1))
contour(k, filled=TRUE, levels=seq(0.00,1.00, by=0.1))
title(main="Mapa de prob < ou = a Q2 para silte")
k = krige.conv(geo_silte_md, loc=loci, krige=krige.control(type.krige = "ok", obj.model = ajust_silte_md_1))
contour(k, filled=TRUE, levels=seq(0.00,1.00, by=0.1))
title(main="Mapa de prob < ou = a Médio para silte")
k = krige.conv(geo_areia_q1, loc=loci, krige=krige.control(type.krige = "ok", obj.model = eye_areia_q1_1))
contour(k, filled=TRUE, levels=seq(0.00,1.00, by=0.1))
title(main="Mapa de prob < ou = a Q1 para areia")
k = krige.conv(geo_areia_q2, loc=loci, krige=krige.control(type.krige = "ok", obj.model = eye_areia_q2_1))
contour(k, filled=TRUE, levels=seq(0.00,1.00, by=0.1))
title(main="Mapa de prob < ou = a Q1 para areia")
k = krige.conv(geo_areia_md, loc=loci, krige=krige.control(type.krige = "ok", obj.model = eye_areia_md_1))
contour(k, filled=TRUE, levels=seq(0.00,1.00, by=0.1))
title(main="Mapa de prob < ou = a Q1 para areia")
k = krige.conv(geo_areia_q3, loc=loci, krige=krige.control(type.krige = "ok", obj.model = eye_areia_q3_1))
contour(k, filled=TRUE, levels=seq(0.00,1.00, by=0.1))
title(main="Mapa de prob < ou = a Q1 para areia")
#*****************************************************************#
#*                        ARDL Regressions                        #
#*                   Rodger Campos - 28/10/23                     #
#*****************************************************************#
rm(list = ls())
sessionInfo()
# Setting working directory (parent folder)
# setwd("C:/Users/rodger.campos/OneDrive")
# PACKAGES
pkgs_cran <- c('ggplot2', 'forecast', 'mFilter',
'plotly', 'forecastHybrid', 'vars',
'stargazer', 'xtable',  'ggfortify',
'rlang','readxl','fpp','prophet','tibble',
'MASS', 'reshape2', 'reshape','lubridate',
'xts', 'tseries','strucchange','zoo','dplyr',
'caTools', 'tsDyn', 'fastDummies', 'dynamac',
'urca','dLagM', 'ARDL','htmlwidgets','arrow','remotes')
for (i in 1:length(pkgs_cran)) {
if (!library(pkgs_cran[i], character.only =  TRUE, logical.return =  TRUE)) {
install.packages(eval(pkgs_cran[i]))
}
library(pkgs_cran[i], character.only =  TRUE)
}
rm(pkgs_cran)
#'TSplotly','ggthemr','BMR',
if (!require('cognitiveutils'))remotes::install_github("JanaJarecki/cogsciutils");library(cognitiveutils)
library(readxl)
library(fastDummies)
library(dLagM)
library(vars)
library(openxlsx)
path = 'C:/Users/onurb/OneDrive - RBA Consultoria Econômica/PLATAFORMA RBA IMOB/Base de Dados'
df_demanda <- read_excel(paste0(path,"/1_bronze/bronze_auxiliary_data/df_demanda2024_04_30.xlsx"))
df_demanda <- dummy_cols(df_demanda, select_columns = 'mes')
names(df_demanda)
df_demanda$estoque= as.numeric(df_demanda$saldos_caged_emprego)
df_demanda$indice_expectativa_construcao = as.numeric(gsub(',','.',df_demanda$indice_expectativa_construcao))
df_demanda$indice_expectativa_varejo_ampliado = as.numeric(gsub(',','.',df_demanda$indice_expectativa_varejo_ampliado))
df_demanda$indice_expectativa_servicos =as.numeric(gsub(',','.',df_demanda$indice_expectativa_servicos))
df_demanda$indice_expectativa_confianca_consumidor = as.numeric(gsub(',','.',df_demanda$indice_expectativa_confianca_consumidor))
df_demanda$indice_expectativa_empresarial =as.numeric(gsub(',','.',df_demanda$indice_expectativa_empresarial))
# bool data between 11/03/2020 - 05/05/2023
df_demanda$data <- as.Date(paste0(df_demanda$ano,'-',df_demanda$mes,"-01"))
df_demanda = df_demanda[order(df_demanda$data),]
df_demanda$crise = ifelse(df_demanda$data >= as.Date("2020-03-11") & df_demanda$data <= as.Date("2023-05-05"),1,0)
# df_demanda = df_demanda[,!names(df_demanda) %in% c("pib_t_mais_4")]
#**************************************************************************
#                             1 UNIT ROOT
#**************************************************************************
library(tseries)
# 1.A. Conversion to a time series
cov_ts <- df_demanda[complete.cases(df_demanda),] #check NA - cuidado para n?o ser no meio da s?rie. Tem vari?veis com NA assim
cov_ts<-ts(cov_ts, frequency = 12,start = c(2019,01))
cov_ts_dif<-ts(diff.Date(cov_ts), frequency = 12, start = c(2019,02))
# 1.B. Unit Root Tests
# ggtsdisplay(cov_ts[,5]) # Total of Lags
ndiffs(cov_ts) # number of differences. Remember: for ARDL, diffferences MUST to be LESS the 2 - I(0) or I(1)
ndiffs(cov_ts_dif)
#1.B.1. ADF test - H0 variable has a unit root
adf.test(cov_ts[,'quant_imov_itbi']) # if H0 is not rejected, take first difference
adf.test(cov_ts_dif[,'quant_imov_itbi']) # if H0 is not rejected, take second difference
# We cannot reject the null hypothesis because the p-value is not smaller than 0.05.
#
# This indicates that the time series is non-stationary. To put it another way,
# it has some time-dependent structure and does not exhibit constant variance over time.
#1.B.2. Kpss test - H0 x is level or trend stationary
kpss.test(cov_ts[,'quant_imov_itbi'])
#1.B.3. PP test - H0 x has a unit root
pp.test(cov_ts[,'quant_imov_itbi'])
# racional ----------------------------------------------------------------
#**************************************************************************
#                             2 LAGS SELECTION
#**************************************************************************
# STRATEGY 1. VARSELECTION
temp_aux = df_demanda
col = c("quant_imov_itbi"
,"indice_expectativa_construcao"
,"indice_expectativa_confianca_consumidor"
,"tx_juros_med_swap_pre_di_prazo_360_dia"
,"ipca_t_mais_1"
,"pib_t_mais_1"
,"selic_t_mais_1"
,"crise"
)
temp = temp_aux[,col]
temp$indice_expectativa_construcao <- log(temp$indice_expectativa_construcao)
temp$indice_expectativa_confianca_consumidor <- log(temp$indice_expectativa_confianca_consumidor)
temp$quant_imov_itbi <- log(temp$quant_imov_itbi)
train<-sample_frac(temp, 0.7)
sid<-as.numeric(rownames(train))
test<-temp[-sid,]
VARselect(train)
source("~/GitHub/deploy-exemplo/deploy.R")
deployApp(forceUpdate = TRUE)
deployApp(forceUpdate = TRUE)
if (!require('rsconnect'))install.packages("rsconnect");library(rsconnect)
#| context: setup
library(zoo)
library(plotly)
library(lubridate)
library(tidyverse)
library(rvest)
library(stringr)
setwd("~/GitHub/Dashboard_Temperatura")
---
title: "Clima em Uberlândia"
